# Code generated by KubeVela templates. DO NOT EDIT.
apiVersion: core.oam.dev/v1alpha2
kind: TraitDefinition
metadata:
  annotations:
    definition.oam.dev/description: "Configures K8s ingress and service to enable web traffic for your service.
    Please use route trait in cap center for advanced usage."
  name: ingress
spec:
  status:
    customStatus: |-
      if len(context.outputs.ingress.status.loadBalancer.ingress) > 0 {
      	message: "Visiting URL: " + context.outputs.ingress.spec.rules[0].host + ", IP: " + context.outputs.ingress.status.loadBalancer.ingress[0].ip
      }
      if len(context.outputs.ingress.status.loadBalancer.ingress) == 0 {
      	message: "No loadBalancer found, visiting by using 'vela port-forward " + context.appName + " --route'\n"
      }
    healthPolicy: |
      isHealth: len(context.outputs.service.spec.clusterIP) > 0
  appliesToWorkloads:
    - webservice
    - worker
  template: |
    parameter: {
    	domain: string
    	http: [string]: int
    }
    
    // trait template can have multiple outputs in one trait
    outputs: service: {
    	apiVersion: "v1"
    	kind:       "Service"
    	metadata:
    		name: context.name
    	spec: {
    		selector:
    			"app.oam.dev/component": context.name
    		ports: [
    			for k, v in parameter.http {
    				port:       v
    				targetPort: v
    			},
    		]
    	}
    }
    
    outputs: ingress: {
    	apiVersion: "networking.k8s.io/v1beta1"
    	kind:       "Ingress"
    	metadata:
    		name: context.name
    	spec: {
    		rules: [{
    			host: parameter.domain
    			http: {
    				paths: [
    					for k, v in parameter.http {
    						path: k
    						backend: {
    							serviceName: context.name
    							servicePort: v
    						}
    					},
    				]
    			}
    		}]
    	}
    }
    
